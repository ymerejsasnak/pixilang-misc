include "toggle.pixi"
include "slider.pixi"
include "wave_window.pixi"
include "util.pixi" // needed by wave_window and slider
include "audiocallback.pixi"


resize( get_screen(), WINDOW_XSIZE, WINDOW_YSIZE )
xmin = -WINDOW_XSIZE / 2
xmax = WINDOW_XSIZE / 2
ymin = -WINDOW_YSIZE / 2
ymax = WINDOW_YSIZE / 2
 
 
 
    



wav = load("demo1.wav")
wav2 = load("demo1.wav")

w = create_wave_window(wav, -50, -200, 150, 100)
w2 = create_wave_window(wav2, 0, -100, 150, 100)



t = create_toggle(xmin, ymin, 200, 100, "1", tw, w)
t2 = create_toggle(xmin, ymin + 150, 200, 100, "2", tw, w2)


s = create_slider(100, 0, 50, 200)

while(1)
{
	while get_event() 
 	{ 
  		if EVT[ EVT_TYPE ] == EVT_QUIT { halt } 
  		
  		if EVT[ EVT_TYPE ] == EVT_MOUSEBUTTONDOWN
  		{
  		    
  		    
  		    
  		    x = EVT[ EVT_X ]
  		    y = EVT[ EVT_Y ]
  		    
  		    s.touch(s, x, y)
  		    t.touch(t, x, y)
  		    t2.touch(t2, x, y)
  		    
  		}
  		
  		if EVT [EVT_TYPE] == EVT_MOUSEMOVE
  		{
  		
  		    x = EVT[ EVT_X ]
  		    y = EVT[ EVT_Y ]
  		    s.move(s, x, y)
  		}
  		
  		if EVT [EVT_TYPE] == EVT_MOUSEBUTTONUP
  		{
  		    s.touch(s)
  		    
  		    t.turnoff(t)
  		    t2.turnoff(t2)
  		}
  		
	}
	
    clear(get_blend(WHITE, BLACK, 200))
    
	
  	    
  		    t.xsize = (s.pos + 0.5) * 100
  	t.draw(t)
  	t2.draw(t2)
  	
     //
    
    //
     	
 	w.draw(w)
    w2.draw(w2)
    
    
    s.draw(s)
	

    frame()
	

}


fn tw($on, $this)
{
    if $on
  	{
  	//set_audio_callback(audio_callback, w.sample_info + w2.sample_info, 44100, INT32, 2, AUDIO_FLAG_INTERP2)
  	set_audio_callback( audio_callback, $this.sample_info, get_prop( $this.data, "sample_rate"), get_type( $this.data ), get_prop($this.data, "channels") ,AUDIO_FLAG_INTERP2 )
  	}
    else {set_audio_callback(-1)}
}
